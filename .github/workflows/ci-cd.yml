# .github/workflows/ci-cd.yml

name: CI/CD - Build and Deploy to Google Cloud

# 1. Control de Concurrencia: Evita despliegues simultáneos.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - main
    # Opcional: Ejecutar también con tags para releases
    tags:
      - 'v*.*.*'

jobs:
  test-and-build:
    # Cambiamos el nombre para reflejar la nueva función
    name: Continuous Integration - Test and Build
    runs-on: ubuntu-latest
    
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Caché para dependencias de Python
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Run Model Training
        id: training
        run: |
          pip install -r requirements/dev.txt
          python breast_cancer_app/model/train_model.py

      - name: Build Docker Images
        id: build
        uses: docker/build-push-action@v4
        with:
          context: .
          # Construye las imágenes y las carga en el Docker local del runner
          push: false
          load: true
          # Especifica los nombres de las imágenes para que docker-compose las encuentre
          tags: |
            breast_cancer_project-api:latest
            breast_cancer_project-frontend:latest
            breast_cancer_project-dev:latest

      - name: Run Integration Tests
        run: |
          docker compose up -d api
          docker compose run --rm tester
  # --- El job de despliegue está comentado por defecto ---
  # deploy:
  #   name: Deploy to Cloud Run
  #   needs: test-and-build
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main' # Only deploy on push to main

  #   permissions:
  #     contents: 'read'
  #     id-token: 'write'

  #   steps:
  #     - name: Authenticate to Google Cloud
  #       uses: 'google-github-actions/auth@v1'
  #       with:
  #         workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
  #         service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

  #     - name: Deploy API to Cloud Run
  #       uses: 'google-github-actions/deploy-cloudrun@v1'
  #       with:
  #         service: ${{ env.API_SERVICE_NAME }}
  #         region: ${{ env.REGION }}
  #         image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.API_REPOSITORY }}/${{ env.API_SERVICE_NAME }}:main

  #     - name: Deploy Frontend to Cloud Run
  #       uses: 'google-github-actions/deploy-cloudrun@v1'
  #       with:
  #         service: ${{ env.FRONTEND_SERVICE_NAME }}
  #         region: ${{ env.REGION }}
  #         image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.FRONTEND_REPOSITORY }}/${{ env.FRONTEND_SERVICE_NAME }}:main
  #         env_vars: |
  #           API_URL=https://$(gcloud run services describe ${{ env.API_SERVICE_NAME }} --platform managed --region ${{ env.REGION }} --format 'value(status.url)' | sed 's|https://||')