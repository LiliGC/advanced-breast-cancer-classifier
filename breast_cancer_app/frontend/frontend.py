# frontend.py
import streamlit as st
import requests
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import json
import time
from datetime import datetime
import os
import base64

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Clasificador IA de C√°ncer de Mama",
    page_icon="üéÄ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personalizado para mejorar la apariencia
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background: #f0f2f6;
        padding: 1rem;
        border-radius: 10px;
        border-left: 5px solid #667eea;
        margin: 0.5rem 0;
    }
    .info-box {
        background: #e8f4fd;
        padding: 1rem;
        border-radius: 10px;
        border: 1px solid #b3d9ff;
        margin: 1rem 0;
    }
    .warning-box {
        background: #fff3cd;
        padding: 1rem;
        border-radius: 10px;
        border: 1px solid #ffeaa7;
        margin: 1rem 0;
    }
    .success-box {
        background: #d4edda;
        padding: 1rem;
        border-radius: 10px;
        border: 1px solid #c3e6cb;
        margin: 1rem 0;
    }
    .stTabs [data-baseweb="tab-list"] {
        gap: 2px;
    }
    .stTabs [data-baseweb="tab"] {
        padding-left: 20px;
        padding-right: 20px;
    }
</style>
""", unsafe_allow_html=True)

# --- Configuraci√≥n y Conexi√≥n a la API ---
BASE_URL = os.environ.get("API_URL", "http://127.0.0.1:5000")

@st.cache_data(ttl=300)
def get_api_health():
    """Verificar el estado de la API"""
    try:
        response = requests.get(f"{BASE_URL}/health", timeout=5)
        return response.status_code == 200, response.json() if response.status_code == 200 else {}
    except:
        return False, {}

@st.cache_data(ttl=600)
def get_model_info():
    """Obtener informaci√≥n del modelo"""
    try:
        response = requests.get(f"{BASE_URL}/model/info", timeout=10)
        return response.json() if response.status_code == 200 else {}
    except:
        return {}

@st.cache_data(ttl=600)
def get_features_info():
    """Obtener informaci√≥n de features"""
    try:
        response = requests.get(f"{BASE_URL}/features", timeout=10)
        return response.json() if response.status_code == 200 else {}
    except:
        return {}

@st.cache_data(ttl=600)
def get_json_artifact(filename: str):
    """Obtener un artefacto JSON (como example_cases) desde la API."""
    try:
        # Usamos el endpoint de visualizaciones que tambi√©n puede servir archivos JSON
        response = requests.get(f"{BASE_URL}/visualizations/{filename}", timeout=10)
        return response.json() if response.status_code == 200 else {}
    except:
        return {}

def make_prediction(features):
    """Hacer predicci√≥n a trav√©s de la API"""
    try:
        response = requests.post(
            f"{BASE_URL}/predict",
            json={"features": features},
            timeout=15
        )
        return response.status_code == 200, response.json()
    except Exception as e:
        return False, {"error": str(e)}

def show_dataset_info():
    """Mostrar informaci√≥n detallada del dataset"""
    st.markdown("""
    <div class="info-box">
    <h3>üìä Dataset: Wisconsin Breast Cancer (Diagnostic)</h3>
    <p><strong>Fuente:</strong> UCI Machine Learning Repository</p>
    <p><strong>Creado por:</strong> Dr. William H. Wolberg, University of Wisconsin Hospitals</p>
    <p><strong>A√±o:</strong> 1995</p>
    <p><strong>Casos totales:</strong> 569 muestras</p>
    <p><strong>Distribuci√≥n:</strong> 357 benignos (62.7%) | 212 malignos (37.3%)</p>
    <p><strong>Origen de los Datos:</strong> Las caracter√≠sticas se computan a partir de im√°genes digitalizadas de una <strong>Aspiraci√≥n con Aguja Fina (AAF)</strong>, un procedimiento de biopsia.</p>
    </div>
    """, unsafe_allow_html=True)

def setup_sidebar(api_info, model_info):
    """Configura la barra lateral mejorada"""
    with st.sidebar:
        st.markdown("### ü§ñ Estado del Sistema")
        
        if api_info:
            st.success("‚úÖ API Conectada")
            st.markdown(f"**Modelo:** {api_info.get('model', 'N/A')}")
            st.markdown(f"**Features:** {api_info.get('features_count', 'N/A')}")
            st.markdown(f"**Versi√≥n:** {api_info.get('version', 'N/A')}")
        else:
            st.error("‚ùå API Desconectada")
        
        if model_info and 'metrics' in model_info:
            st.markdown("### üéØ M√©tricas del Modelo")
            metrics = model_info['metrics']
            
            # Extraer recall de la clase 'Maligno' (clase '0')
            recall_maligno = metrics.get('classification_report', {}).get('0', {}).get('recall', 0)
            
            st.metric("Accuracy", f"{metrics.get('test_accuracy', 0):.1%}")
            st.metric("ROC-AUC", f"{metrics.get('roc_auc', 0):.3f}")
            
            # Mostrar Recall de forma destacada
            st.metric(
                "Recall (Maligno)", 
                f"{recall_maligno:.1%}",
                help="Capacidad del modelo para encontrar TODOS los casos malignos. Un valor alto es crucial."
            )
        
        st.markdown("---")
        st.markdown("""
        ### üë®‚Äçüíª Informaci√≥n del Desarrollador
        **Desarrollado por:** LiliGC  
        **Tecnolog√≠as:** 
        - ü§ñ scikit-learn
        - üåê Flask API
        - üìä Streamlit
        - üìà Plotly
        
        ### üîó Recursos
        - [Dataset UCI](https://archive.ics.uci.edu/ml/datasets/Breast+Cancer+Wisconsin+(Diagnostic))
        - [Informaci√≥n M√©dica](https://www.cancer.org/cancer/breast-cancer.html)
        """)

def create_gauge_chart(value, title, color_scheme="green"):
    """Crear gr√°fico de gauge mejorado"""
    if color_scheme == "green":
        color = "#00cc96"
        steps_colors = ["#ff6b6b", "#feca57", "#48dbfb", "#00cc96"]
    else:
        color = "#ff6b6b"
        steps_colors = ["#00cc96", "#48dbfb", "#feca57", "#ff6b6b"]
    
    fig = go.Figure(go.Indicator(
        mode="gauge+number+delta",
        value=value,
        title={'text': title, 'font': {'size': 24}},
        delta=None, # Eliminamos el delta para mayor claridad
        gauge={
            'axis': {'range': [None, 100], 'tickwidth': 1},
            'bar': {'color': color, 'thickness': 0.3},
            'steps': [ # Simplificado para evitar errores de versi√≥n
                {'range': [0, 50], 'color': "lightgray"},
                {'range': [50, 100], 'color': "gray"}
            ]}))
    
    fig.update_layout(
        height=300,
        margin=dict(l=20, r=20, t=50, b=20),
        font={'color': "darkblue", 'family': "Arial"}
    )
    return fig

def show_home():
    """P√°gina de inicio mejorada"""
    # Header principal
    st.markdown("""
    <div class="main-header">
        <h1>ü©∫ Clasificador IA de C√°ncer de Mama</h1>
        <p>Sistema inteligente de apoyo diagn√≥stico usando Machine Learning</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Informaci√≥n del dataset
    show_dataset_info()
    
    # Caracter√≠sticas principales
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("""
        <div class="metric-card">
        <h3>ü§ñ Tecnolog√≠a IA</h3>
        <p>Random Forest optimizado con validaci√≥n cruzada y an√°lisis de importancia de caracter√≠sticas</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="metric-card">
        <h3>‚ö° Tiempo Real</h3>
        <p>Predicciones instant√°neas con an√°lisis de confianza y factores de decisi√≥n</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown("""
        <div class="metric-card">
        <h3>üìä Visualizaci√≥n</h3>
        <p>Gr√°ficos interactivos y dashboards informativos para an√°lisis completo</p>
        </div>
        """, unsafe_allow_html=True)
    
    # C√≥mo usar la aplicaci√≥n
    st.markdown("### üöÄ C√≥mo usar esta aplicaci√≥n")
    
    steps_col1, steps_col2 = st.columns([1, 1])
    
    with steps_col1:
        st.markdown("""
        **1. üîÆ Realizar Predicci√≥n**
        - Selecciona casos predefinidos o ajusta valores manualmente
        - Obt√©n diagn√≥stico instant√°neo con nivel de confianza
        - Analiza las caracter√≠sticas m√°s importantes
        
        **2. üìä Explorar Dataset**
        - Revisa estad√≠sticas del conjunto de datos
        - Comprende las distribuciones de caracter√≠sticas
        - Visualiza patrones y tendencias
        """)
    
    with steps_col2:
        st.markdown("""
        **3. üìà Evaluar Modelo**
        - Examina m√©tricas de rendimiento
        - Visualiza curvas ROC y matrices de confusi√≥n
        - Entiende la importancia de cada caracter√≠stica
        
        **4. üéõÔ∏è Experimentar**
        - Modifica par√°metros en tiempo real
        - Observa c√≥mo cambian las predicciones
        - Aprende sobre el comportamiento del modelo
        """)

    # Nueva secci√≥n para la informaci√≥n m√©dica
    st.markdown("### ü©∫ Informaci√≥n M√©dica sobre C√°ncer de Mama")
    col1, col2 = st.columns(2)
    with col1:
        st.markdown("""
        <div class="info-box">
        <h4>¬øQu√© es?</h4>
        <p>Es una enfermedad en la que las c√©lulas de la mama se multiplican sin control. Es el segundo c√°ncer m√°s com√∫n en mujeres a nivel mundial.</p>
        
        <h4>S√≠ntomas Clave</h4>
        <ul>
            <li>Bulto en la mama o axila</li>
            <li>Cambios en tama√±o, forma o piel</li>
            <li>Secreci√≥n del pez√≥n</li>
        </ul>
        </div>
        """, unsafe_allow_html=True)
    with col2:
        st.markdown("""
        <div class="info-box">
        <h4>Factores de Riesgo</h4>
        <ul>
            <li>Edad (>50 a√±os) y antecedentes familiares</li>
            <li>Mutaciones gen√©ticas (BRCA1, BRCA2)</li>
            <li>Estilo de vida (obesidad, alcohol)</li>
        </ul>
        
        <h4>Detecci√≥n Temprana</h4>
        <p>Es crucial. Incluye autoex√°menes, ex√°menes cl√≠nicos y mamograf√≠as regulares (especialmente a partir de los 40 a√±os).</p>
        </div>
        """, unsafe_allow_html=True)
    
    # Disclaimer m√©dico
    st.markdown("""
    <div class="warning-box">
    <h3>‚ö†Ô∏è Descargo de Responsabilidad M√©dica</h3>
    <p><strong>IMPORTANTE:</strong> Esta aplicaci√≥n es una herramienta educativa y de demostraci√≥n tecnol√≥gica. 
    <strong>NO debe utilizarse para diagn√≥sticos m√©dicos reales.</strong></p>
    <ul>
    <li>Los resultados son generados por un modelo de IA con fines educativos</li>
    <li>NO reemplaza la consulta con profesionales m√©dicos cualificados</li>
    <li>Para cualquier preocupaci√≥n m√©dica, consulte siempre a un m√©dico</li>
    <li>La detecci√≥n temprana requiere ex√°menes m√©dicos profesionales</li>
    </ul>
    </div>
    """, unsafe_allow_html=True)

    st.markdown("### ü§î ¬øPor qu√© no puedo subir una mamograf√≠a?")
    st.markdown("""
    <div class="info-box">
    <p>Este modelo de IA fue entrenado con <strong>datos num√©ricos</strong> extra√≠dos de un procedimiento de biopsia llamado <strong>Aspiraci√≥n con Aguja Fina (AAF)</strong>. No analiza im√°genes directamente.</p>
    <ul>
        <li><strong>An√°lisis de Im√°genes:</strong> Requerir√≠a un tipo de modelo completamente diferente (una Red Neuronal Convolucional o CNN) entrenado con miles de im√°genes de mamograf√≠as.</li>
        <li><strong>An√°lisis de Datos Tabulares:</strong> Este modelo se especializa en encontrar patrones en las mediciones de las c√©lulas (radio, textura, etc.) que ya han sido extra√≠das por un pat√≥logo.</li>
    </ul>
    <p>Ambos enfoques son v√°lidos en la IA m√©dica, pero abordan el problema desde √°ngulos diferentes.</p>
    </div>
    """, unsafe_allow_html=True)

def show_prediction_tab():
    """Tab de predicci√≥n mejorado"""
    st.header("üîÆ Predicci√≥n Inteligente")
    
    # ¬°CORRECCI√ìN! Usar session_state para recordar el m√©todo de entrada
    if 'prediction_method' not in st.session_state:
        st.session_state.prediction_method = "üéØ Casos Predefinidos"

    # Selector de m√©todo
    st.session_state.prediction_method = st.radio(
        "**M√©todo de entrada de datos:**",
        ["üéØ Casos Predefinidos", "üéõÔ∏è Ajuste Manual Interactivo"],
        horizontal=True,
        key="prediction_method_selector",
        index=0 if st.session_state.prediction_method == "üéØ Casos Predefinidos" else 1
    )
    
    # Obtener informaci√≥n de features
    features_info = get_features_info()
    
    if st.session_state.prediction_method == "üéØ Casos Predefinidos":
        st.markdown("---")
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            case_type = st.selectbox(
                "**Selecciona un caso cl√≠nico de ejemplo:**",
                ["üü¢ Benigno T√≠pico", "üî¥ Maligno T√≠pico", "üü° Caso L√≠mite"],
                help="Estos son casos reales del dataset seleccionados por su claridad o ambig√ºedad."
            )
        # Generar features seg√∫n el caso
        example_cases = get_json_artifact("example_cases.json")
        if example_cases:
            if "Benigno" in case_type:
                case_data = example_cases.get("benign_typical", {})
            elif "Maligno" in case_type:
                case_data = example_cases.get("malignant_typical", {})
            elif "L√≠mite" in case_type:
                case_data = example_cases.get("borderline_case", {})
            
            features = case_data.get("features", [])
            case_description = case_data.get("description", "No se pudo cargar el caso.")
            st.info(f"üìù **Descripci√≥n del caso:** {case_description}")
        else:
            st.warning("‚ö†Ô∏è No se pudo cargar informaci√≥n de features. Usando valores por defecto.")
            features = np.random.normal(15, 3, 30).tolist()
    
    else:  # Ajuste Manual
        st.markdown("---")
        st.markdown("### üéõÔ∏è Control Manual de Caracter√≠sticas")
        st.info("üí° **Instrucciones:** Mueve los deslizadores para simular un caso cl√≠nico. Luego, presiona el bot√≥n de predicci√≥n para ver el an√°lisis del modelo.")
        
        if features_info and 'feature_ranges' in features_info:
            manual_features = {}

            # Crear dos columnas para los sliders
            col1, col2 = st.columns(2)
            
            # ¬°CORRECCI√ìN CLAVE! Iterar en el orden correcto
            ordered_feature_names = features_info.get('feature_names', list(features_info['feature_ranges'].keys()))
            for i, feature_name in enumerate(ordered_feature_names):
                ranges = features_info['feature_ranges'][feature_name]
                container = col1 if i % 2 == 0 else col2
                
                with container:
                    description = features_info.get('feature_descriptions', {}).get(feature_name, 'Caracter√≠stica m√©dica del tumor')
                    
                    # Formatear el nombre para mejor legibilidad
                    display_name = feature_name.replace('mean ', '').replace('_', ' ').title()
                    
                    manual_features[feature_name] = st.slider(
                        f"**{display_name}**",
                        min_value=float(ranges['min']),
                        max_value=float(ranges['max']),
                        value=float(ranges['mean']),
                        step=(ranges['max'] - ranges['min']) / 200,
                        key=f"manual_{feature_name}",
                        help=f"{description}\nRango: {ranges['min']:.2f} - {ranges['max']:.2f}"
                    )
            
            # ¬°CORRECCI√ìN CLAVE! Asegurar el orden correcto de las features.
            # Recolectar los valores en el mismo orden que 'ordered_feature_names'.
            features = [manual_features[name] for name in ordered_feature_names]
            
            # Bot√≥n para resetear valores
            if st.button("üîÑ Resetear a Valores Promedio"):
                st.rerun()
        else:
            st.error("‚ùå No se pudo cargar la informaci√≥n de features.")
            return
    
    # Predicci√≥n
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        if st.button("üîÆ **REALIZAR PREDICCI√ìN**", type="primary", use_container_width=True): # st.button a√∫n no soporta 'width'
            with st.spinner("üß† Analizando caracter√≠sticas del tumor..."):
                time.sleep(1)  # Peque√±a pausa para UX
                success, result = make_prediction(features)
                
                if success and 'prediction' in result:
                    st.session_state['last_prediction'] = result
                    st.session_state['prediction_time'] = datetime.now()
                else:
                    st.error(f"‚ùå Error en la predicci√≥n: {result.get('error', 'Error desconocido')}")
    
    # Mostrar resultados
    if 'last_prediction' in st.session_state:
        st.markdown("---")
        st.markdown("## üìã Dashboard de Resultados")
        
        result = st.session_state['last_prediction']
        prediction_time = st.session_state.get('prediction_time', datetime.now())
        
        # Informaci√≥n principal
        prediction_label = result.get('interpretation', 'Desconocido')
        confidence = result.get('confidence', 0) * 100
        is_benign = result.get('prediction') == 1
        
        # Layout principal de resultados
        result_col1, result_col2, result_col3 = st.columns([1, 2, 1])
        
        with result_col1:
            if is_benign:
                st.markdown("""
                <div class="success-box">
                <h3>‚úÖ BENIGNO</h3>
                <p>Tumor no canceroso</p>
                </div>
                """, unsafe_allow_html=True)
            else:
                st.markdown("""
                <div style="background: #f8d7da; padding: 1rem; border-radius: 10px; border: 1px solid #f5c6cb; margin: 1rem 0;">
                <h3>‚ö†Ô∏è MALIGNO</h3>
                <p>Tumor potencialmente canceroso</p>
                </div>
                """, unsafe_allow_html=True)
            
            st.markdown(f"**Tiempo de an√°lisis:** {prediction_time.strftime('%H:%M:%S')}")
        
        with result_col2:
            # Gauge de confianza
            gauge_color = "green" if is_benign else "red"
            gauge_fig = create_gauge_chart(confidence, "Nivel de Confianza (%)", gauge_color)
            st.plotly_chart(gauge_fig)
        
        with result_col3:
            # Probabilidades
            probs = result.get('prediction_proba', [0, 0])
            prob_maligno = probs[0] * 100
            prob_benigno = probs[1] * 100
            
            st.markdown("**Probabilidades:**")
            st.markdown(f"üî¥ Maligno: {prob_maligno:.1f}%")
            st.markdown(f"üü¢ Benigno: {prob_benigno:.1f}%")
            
            # Gr√°fico de barras peque√±o
            prob_fig = go.Figure()
            prob_fig.add_trace(go.Bar(
                x=['Maligno', 'Benigno'],
                y=[prob_maligno, prob_benigno],
                marker_color=['#ff6b6b', '#51cf66']
            ))
            prob_fig.update_layout(
                height=200,
                margin=dict(l=20, r=20, t=20, b=40),
                showlegend=False,
                yaxis_title="Probabilidad (%)"
            )
            st.plotly_chart(prob_fig)
        
        # An√°lisis de caracter√≠sticas importantes
        if 'feature_contributions' in result:
            st.markdown("### üéØ Caracter√≠sticas M√°s Influyentes en la Decisi√≥n")
            
            contrib_df = pd.DataFrame(result['feature_contributions'][:8])  # Top 8
            
            fig = px.bar(
                contrib_df,
                x='contribution',
                y='feature',
                orientation='h',
                color='contribution',
                color_continuous_scale='viridis',
                title="Contribuci√≥n de cada caracter√≠stica a la predicci√≥n"
            )
            fig.update_layout(
                height=400,
                yaxis={'categoryorder': 'total ascending'},
                xaxis_title="Nivel de Contribuci√≥n",
                yaxis_title="Caracter√≠stica"
            )
            st.plotly_chart(fig)

            # ¬°CORRECCI√ìN! Mover la tabla detallada dentro del bloque 'if'
            with st.expander("üìä Ver Detalles de Todas las Caracter√≠sticas"):
                detailed_df = pd.DataFrame(result['feature_contributions']) # Usar todos los datos, no solo el top 8
                detailed_df['value'] = detailed_df['value'].round(3)
                detailed_df['contribution'] = detailed_df['contribution'].round(4)
                detailed_df = detailed_df.rename(columns={
                    'feature': 'Caracter√≠stica',
                    'value': 'Valor Medido',
                    'importance': 'Importancia del Modelo',
                    'contribution': 'Contribuci√≥n a la Decisi√≥n'
                })
                st.dataframe(detailed_df)
def show_dataset_analysis():
    """Tab de an√°lisis del dataset mejorado"""
    st.header("üî¨ An√°lisis del Dataset")
    
    # Informaci√≥n del dataset
    show_dataset_info()
    
    features_info = get_features_info()
    
    if not features_info or 'feature_ranges' not in features_info:
        st.error("‚ùå No se pudo cargar la informaci√≥n del dataset.")
        return
    
    # Estad√≠sticas generales
    st.markdown("### üìà Estad√≠sticas de las Caracter√≠sticas")
    
    ranges_df = pd.DataFrame.from_dict(features_info['feature_ranges'], orient='index')
    ranges_df = ranges_df.round(3)
    ranges_df.index.name = 'Caracter√≠stica'
    ranges_df = ranges_df.rename(columns={
        'min': 'M√≠nimo',
        'max': 'M√°ximo',
        'mean': 'Media',
        'std': 'Desviaci√≥n Est√°ndar'
    })
    
    # A√±adir rango y coeficiente de variaci√≥n
    ranges_df['Rango'] = ranges_df['M√°ximo'] - ranges_df['M√≠nimo']
    ranges_df['Coef. Variaci√≥n'] = (ranges_df['Desviaci√≥n Est√°ndar'] / ranges_df['Media']).round(3)
    
    
    # Visualizaciones interactivas
    st.markdown("### üìä Visualizaciones Interactivas")
    
    viz_tab1, viz_tab2, viz_tab3 = st.tabs([
        "üìà Distribuciones",
        "üîó Correlaciones",
        "üìã Comparativas"
    ])
    
    with viz_tab1:
        st.markdown("**Selecciona caracter√≠sticas para visualizar sus distribuciones:**")
        st.warning("‚ö†Ô∏è **Nota:** Las siguientes visualizaciones se basan en **datos simulados** con la misma media y desviaci√≥n est√°ndar que el dataset original para fines de demostraci√≥n.")
        
        feature_names = list(features_info['feature_ranges'].keys())
        selected_features = st.multiselect(
            "Caracter√≠sticas:",
            options=feature_names,
            default=feature_names[:4],
            key="dist_features",
            help="Selecciona hasta 6 caracter√≠sticas para mejor visualizaci√≥n"
        )
        
        if selected_features:
            # Box plots
            fig = go.Figure()
            colors = px.colors.qualitative.Set3
            
            for i, feature in enumerate(selected_features):
                ranges = features_info['feature_ranges'][feature]
                
                # Simular distribuci√≥n normal
                simulated_data = pd.DataFrame({
                    feature: np.clip(np.random.normal(ranges['mean'], ranges['std'], 1000), ranges['min'], ranges['max'])
                })
                
                fig.add_trace(go.Box(
                    y=simulated_data[feature],
                    name=feature.replace('mean ', '').replace('_', ' ').title(),
                    marker_color=colors[i % len(colors)],
                    boxpoints='outliers'
                ))
            
            fig.update_layout(
                title="Distribuci√≥n de Caracter√≠sticas Seleccionadas",
                yaxis_title="Valor",
                height=500
            )
            st.plotly_chart(fig)
            
            # Histogramas
            if len(selected_features) <= 4:
                fig_hist = make_subplots(
                    rows=2, cols=2,
                    subplot_titles=[f.replace('mean ', '').replace('_', ' ').title() for f in selected_features[:4]]
                )
                
                for i, feature in enumerate(selected_features[:4]):
                    ranges = features_info['feature_ranges'][feature]
                    simulated_data = pd.DataFrame({
                        feature: np.clip(np.random.normal(ranges['mean'], ranges['std'], 1000), ranges['min'], ranges['max'])
                    })
                    
                    row = i // 2 + 1
                    col = i % 2 + 1
                    
                    fig_hist.add_trace(
                        go.Histogram(x=simulated_data[feature], name=feature, nbinsx=30),
                        row=row, col=col
                    )
                
                fig_hist.update_layout(height=600, showlegend=False)
                st.plotly_chart(fig_hist)
    
    with viz_tab2:
        st.markdown("**Matriz de Correlaci√≥n**")
        try:
            response = requests.get(f"{BASE_URL}/visualizations/correlation_matrix.png", timeout=10)
            if response.status_code == 200:
                st.info("üí° Esta visualizaci√≥n muestra la correlaci√≥n de Pearson entre todas las caracter√≠sticas del dataset. Un valor cercano a 1 (azul) indica una fuerte correlaci√≥n positiva, mientras que un valor cercano a -1 (rojo) indica una fuerte correlaci√≥n negativa.")
                st.image(response.content, caption="Matriz de Correlaci√≥n Real del Dataset")
            else:
                st.error(f"‚ùå No se pudo cargar la matriz de correlaci√≥n. C√≥digo de estado: {response.status_code}")
        except Exception as e:
            st.error(f"‚ùå Error de conexi√≥n al cargar la matriz de correlaci√≥n: {e}")
    
    with viz_tab3:
        st.markdown("**Comparaci√≥n de Caracter√≠sticas**")
        st.warning("‚ö†Ô∏è **Nota:** Esta visualizaci√≥n utiliza **datos simulados** para la demostraci√≥n.")
        
        col1, col2 = st.columns(2)
        
        with col1:
            feature1 = st.selectbox("Primera caracter√≠stica:", feature_names, index=0, key="comp_feature1")
        with col2:
            feature2 = st.selectbox("Segunda caracter√≠stica:", feature_names, index=1, key="comp_feature2")
        
        if feature1 != feature2:
            ranges1 = features_info['feature_ranges'][feature1]
            ranges2 = features_info['feature_ranges'][feature2]
            
            # Scatter plot simulado
            np.random.seed(42)  # Para reproducibilidad
            n_points = 500
            
            # Simular datos correlacionados
            x_data = np.random.normal(ranges1['mean'], ranges1['std'], n_points)
            y_data = np.random.normal(ranges2['mean'], ranges2['std'], n_points)
            
            # A√±adir algo de correlaci√≥n
            correlation_factor = 0.3
            y_data = y_data + correlation_factor * (x_data - ranges1['mean'])
            
            # Clip a los rangos v√°lidos
            x_data = np.clip(x_data, ranges1['min'], ranges1['max'])
            y_data = np.clip(y_data, ranges2['min'], ranges2['max'])
            
            simulated_df = pd.DataFrame({feature1: x_data, feature2: y_data})
            
            fig = px.scatter(
                simulated_df, x=feature1, y=feature2,
                title=f"Relaci√≥n entre {feature1} y {feature2}",
                opacity=0.6,
                trendline="ols", trendline_color_override="red"
            )
            fig.add_hline(y=ranges2['mean'], line_dash="dash", line_color="red", 
                         annotation_text=f"Media de {feature2}")
            fig.add_vline(x=ranges1['mean'], line_dash="dash", line_color="blue", 
                         annotation_text=f"Media de {feature1}")
            
            st.plotly_chart(fig)

def show_model_performance():
    """Tab de rendimiento del modelo mejorado"""
    st.header("üìà Evaluaci√≥n del Rendimiento del Modelo")
    
    model_info = get_model_info()
    
    # M√©tricas principales
    if model_info and 'metrics' in model_info:
        metrics = model_info['metrics']
        
        st.markdown("### üéØ M√©tricas de Rendimiento")
        
        # M√©tricas en cards
        metric_col1, metric_col2, metric_col3 = st.columns(3)
        
        with metric_col1:
            st.metric(
                "Accuracy de Prueba",
                f"{metrics.get('test_accuracy', 0):.1%}",
                delta=f"{(metrics.get('test_accuracy', 0) - metrics.get('train_accuracy', 0)):.2%}",
                help="Porcentaje de predicciones correctas en el conjunto de prueba"
            )
        
        with metric_col2:
            st.metric(
                "ROC-AUC Score",
                f"{metrics.get('roc_auc', 0):.3f}",
                delta="Excelente" if metrics.get('roc_auc', 0) > 0.9 else "Bueno",
                help="√Årea bajo la curva ROC (0.5 = aleatorio, 1.0 = perfecto)"
            )
        
        with metric_col3:
            st.metric(
                "Validaci√≥n Cruzada",
                f"{metrics.get('cv_mean', 0):.3f} ¬± {metrics.get('cv_std', 0):.3f}",
                help="Promedio de validaci√≥n cruzada con 5 pliegues"
            )
        
        # M√©trica de Recall destacada
        recall_maligno = metrics.get('classification_report', {}).get('0', {}).get('recall', 0)
        st.markdown(f"""
        <div class="metric-card" style="border-left-color: #ff6b6b;">
            <h4>ü©∫ Recall (Sensibilidad) para Casos Malignos</h4>
            <h1 style="text-align: center; color: #ff6b6b;">{recall_maligno:.1%}</h1>
            <p style="text-align: center;">De todos los tumores que eran realmente malignos, el modelo identific√≥ correctamente este porcentaje. <strong>Esta es la m√©trica m√°s importante para evitar falsos negativos.</strong></p>
        </div>
        """, unsafe_allow_html=True)
    
    # Visualizaciones del modelo
    st.markdown("### üìä Visualizaciones del Modelo")
    st.info("Las siguientes visualizaciones se generan a partir de la evaluaci√≥n del modelo en el conjunto de datos de prueba.")

    viz_col1, viz_col2 = st.columns(2)

    with viz_col1:
        st.markdown("#### üìä Ranking Interactivo de Features")
        
        if model_info and 'feature_importance' in model_info.get('metrics', {}):
            importance_data = model_info['metrics']['feature_importance'][:12]  # Top 12
            importance_df = pd.DataFrame(importance_data)
            
            # Gr√°fico de barras horizontal
            fig = px.bar(
                importance_df,
                x='importance',
                y='feature',
                orientation='h',
                color='importance',
                color_continuous_scale='viridis',
                title="Caracter√≠sticas M√°s Importantes del Modelo"
            )
            fig.update_layout(
                height=500,
                yaxis={'categoryorder': 'total ascending'},
                xaxis_title="Importancia Relativa",
                yaxis_title="Caracter√≠stica",
                margin=dict(l=20, r=20, t=50, b=20)
            )
            st.plotly_chart(fig)
            
            # Interpretaci√≥n de la importancia
            with st.expander("üß† Interpretaci√≥n de la Importancia de Features"):
                st.markdown("""
                **¬øQu√© significa la "importancia de features"?**
                            
                La importancia de una caracter√≠stica indica cu√°nto se apoya el modelo en ella para tomar sus decisiones. Para un `Random Forest`, se calcula midiendo qu√© tan efectiva es esa caracter√≠stica para **separar correctamente los casos benignos de los malignos** en el √°rbol de decisi√≥n. Un valor alto significa que la caracter√≠stica es crucial para el diagn√≥stico.
                            
                **Caracter√≠sticas Clave y su Contexto M√©dico:**
                
                Generalmente, el modelo aprende que valores m√°s altos en ciertas mediciones son fuertes indicadores de malignidad. Esto se debe a que los tumores cancerosos tienden a ser m√°s grandes, de forma m√°s irregular y a invadir el tejido circundante.
                
                - **`worst radius`, `worst perimeter`, `worst area`**: Miden el **tama√±o** del tumor en su estado m√°s agresivo. Un tama√±o mayor es un claro indicador de malignidad.
                - **`worst concave points`, `mean concave points`**: Describen la **irregularidad del contorno** celular. Los n√∫cleos de las c√©lulas cancerosas suelen tener formas m√°s c√≥ncavas e irregulares, un sello distintivo del c√°ncer.
                - **`worst texture`**: Mide la **variaci√≥n en la escala de grises** de la textura celular. Los tumores malignos suelen tener una textura m√°s heterog√©nea y menos uniforme.
                
                En resumen, el modelo ha aprendido a identificar los patrones de crecimiento descontrolado e irregular que caracterizan a un tumor maligno.
                """)
        else:
            st.info("üìä No hay datos de importancia disponibles")

    with viz_col2:
        st.markdown("#### üìà Curva ROC y Matriz de Confusi√≥n")

        # Usar st.tabs para organizar las dos im√°genes
        roc_tab, cm_tab = st.tabs(["Curva ROC", "Matriz de Confusi√≥n"])

        with roc_tab:
            try:
                response = requests.get(f"{BASE_URL}/visualizations/roc_curve.png", timeout=10)
                if response.status_code == 200:
                    st.image(response.content, caption="Curva ROC (Receiver Operating Characteristic)")
                    st.markdown("""
                    **¬øC√≥mo leer este gr√°fico?**
                    - **Eje Y (Sensibilidad):** La capacidad del modelo para encontrar casos malignos (¬°lo que queremos!).
                    - **Eje X (1 - Especificidad):** La tasa de falsas alarmas (casos benignos incorrectamente marcados como malignos).
                    
                    **Objetivo:** Queremos una curva que suba r√°pido hacia la **esquina superior izquierda**. Esto significa que el modelo es muy bueno encontrando tumores malignos (`True Positive Rate` alto) sin dar muchas falsas alarmas (`False Positive Rate` bajo).
                    """)
                else:
                    st.error(f"No se pudo cargar la Curva ROC. C√≥digo de estado: {response.status_code}")
            except Exception as e:
                st.error(f"Error de conexi√≥n al cargar la Curva ROC: {e}")

        with cm_tab:
            try:
                response = requests.get(f"{BASE_URL}/visualizations/confusion_matrix.png", timeout=10)
                if response.status_code == 200:
                    st.image(response.content, caption="Matriz de Confusi√≥n")
                    st.markdown("""
                    **¬øC√≥mo leer esta tabla?**
                    - **Diagonal Principal (Arriba-Izquierda a Abajo-Derecha):** Estos son los **aciertos**.
                        - **Arriba-Izquierda (Verdaderos Malignos):** Casos malignos que el modelo predijo correctamente como malignos.
                        - **Abajo-Derecha (Verdaderos Benignos):** Casos benignos que el modelo predijo correctamente como benignos.
                    - **Fuera de la Diagonal:** Estos son los **errores**.
                        - **Arriba-Derecha (Falsos Benignos):** ¬°El error m√°s peligroso! Casos malignos que el modelo predijo incorrectamente como benignos.
                        - **Abajo-Izquierda (Falsos Malignos):** Casos benignos que el modelo predijo incorrectamente como malignos (falsas alarmas).
                    """)
                else:
                    st.error(f"No se pudo cargar la Matriz de Confusi√≥n. C√≥digo de estado: {response.status_code}")
            except Exception as e:
                st.error(f"Error de conexi√≥n al cargar la Matriz de Confusi√≥n: {e}")

        # Explicaci√≥n de la importancia de features que estaba en la otra columna
        if not (model_info and 'feature_importance' in model_info.get('metrics', {})):
            st.info("üìä No hay datos de importancia disponibles")
    
    # Informaci√≥n t√©cnica del modelo
    st.markdown("### ‚öôÔ∏è Informaci√≥n T√©cnica del Modelo")
    
    tech_col1, tech_col2 = st.columns(2)
    
    with tech_col1:
        st.markdown("""
        **ü§ñ Algoritmo Utilizado:**
        - Random Forest Classifier
        - Optimizado con GridSearchCV
        - Validaci√≥n cruzada de 5 pliegues
        
        **üìä Caracter√≠sticas del Dataset:**
        - 569 muestras totales
        - 30 caracter√≠sticas por muestra
        - 357 casos benignos (62.7%)
        - 212 casos malignos (37.3%)
        """)
    
    with tech_col2:
        if model_info and 'model_params' in model_info:
            params = model_info['model_params']
            st.markdown("**üîß Par√°metros del Modelo:**")
            
            key_params = ['n_estimators', 'max_depth', 'min_samples_split', 'min_samples_leaf']
            for param in key_params:
                if param in params:
                    st.markdown(f"- **{param}**: {params[param]}")
        else:
            st.markdown("""
            **üîß Optimizaciones Aplicadas:**
            - B√∫squeda de hiperpar√°metros
            - Balanceado de clases
            - Validaci√≥n robusta
            - An√°lisis de sobreajuste
            """)
    
    # Interpretaci√≥n m√©dica
    with st.expander("ü©∫ Interpretaci√≥n M√©dica de los Resultados"):
        st.markdown("""
        ### Contexto M√©dico de las Predicciones
        
        **M√©tricas en contexto m√©dico:**
        - **Alta precisi√≥n (>95%)**: El modelo identifica correctamente la mayor√≠a de casos
        - **ROC-AUC elevado**: Excelente capacidad de discriminaci√≥n entre tumores benignos y malignos
        - **Baja tasa de falsos negativos**: Minimiza casos malignos clasificados como benignos
        
        **Limitaciones importantes:**
        - Este modelo es una herramienta de apoyo, no un diagn√≥stico definitivo
        - Los resultados deben interpretarse junto con evaluaci√≥n cl√≠nica
        - La detecci√≥n temprana requiere m√∫ltiples m√©todos diagn√≥sticos
        
        **Pr√≥ximos pasos en un contexto real:**
        1. Correlacionar con s√≠ntomas cl√≠nicos
        2. Realizar estudios de imagen adicionales
        3. Considerar biopsia si est√° indicada
        4. Evaluaci√≥n por especialista en oncolog√≠a
        """)

def main():
    """Funci√≥n principal de la aplicaci√≥n"""
    # Verificar conexi√≥n con API
    api_status, api_info = get_api_health()
    
    if not api_status:
        st.error("‚ùå **Error de Conexi√≥n con la API**")
        st.markdown("""
        No se puede establecer conexi√≥n con el servidor de la API.
        
        **Pasos para solucionar:**
        1. Aseg√∫rate de que la API est√© ejecut√°ndose: `python api_improved.py`
        2. Verifica que est√© en el puerto correcto: http://127.0.0.1:5000
        3. Si usas Docker: `docker-compose up`
        
        **Estado actual:** API no disponible en `{}`
        """.format(BASE_URL))
        st.stop()
    
    # Cargar informaci√≥n del modelo
    model_info = get_model_info()
    
    # Sidebar
    setup_sidebar(api_info, model_info)
    
    # ¬°CORRECCI√ìN! Usar session_state para mantener la pesta√±a activa
    if 'active_tab' not in st.session_state:
        st.session_state.active_tab = "Inicio"

    # ¬°CORRECCI√ìN! Usar st.radio para controlar las pesta√±as y mantener el estado
    st.session_state.active_tab = st.radio("Navegaci√≥n Principal", [
        "üè† Inicio",
        "üîÆ Predicci√≥n IA",
        "üî¨ An√°lisis Dataset",
        "üìà Rendimiento Modelo"
    ], key="main_nav", horizontal=True, label_visibility="collapsed")

    if st.session_state.active_tab == "üè† Inicio":
        show_home()
    elif st.session_state.active_tab == "üîÆ Predicci√≥n IA":
        show_prediction_tab()
    elif st.session_state.active_tab == "üî¨ An√°lisis Dataset":
        show_dataset_analysis()
    elif st.session_state.active_tab == "üìà Rendimiento Modelo":
        show_model_performance()
    
    # Footer
    st.markdown("---")
    footer_col1, footer_col2, footer_col3 = st.columns(3)
    
    with footer_col1:
        st.markdown("**ü§ñ Tecnolog√≠a:**")
        st.markdown("Random Forest + Flask + Streamlit")
    
    with footer_col2:
        st.markdown("**üìä Dataset:**")
        st.markdown("Wisconsin Breast Cancer (UCI)")
    
    with footer_col3:
        st.markdown("**üë®‚Äçüíª Desarrollador:**")
        st.markdown("LiliGC - Sistema IA M√©dico")
    
    # Informaci√≥n de √∫ltima actualizaci√≥n
    if api_info and 'timestamp' in api_info:
        try:
            timestamp = api_info['timestamp']
            dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
            st.caption(f"üïê √öltima actualizaci√≥n del sistema: {dt.strftime('%d/%m/%Y %H:%M:%S')}")
        except:
            st.caption("üïê Sistema activo y funcionando")

if __name__ == "__main__":
    main()